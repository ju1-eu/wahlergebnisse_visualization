---
name: Update Stargazers

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  update-stargazers:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Update Stargazers list
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { data: stargazers } = await github.rest.activity
                .listStargazersForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });

              const date = new Date().toLocaleString('de-DE', {
                timeZone: 'Europe/Berlin',
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
              });

              const badgeBase = 'https://img.shields.io/badge';
              const repoPath = 'ju1-eu/wahlergebnisse_visualization';
              const badges = {
                macos: `[![macOS](${badgeBase}/macOS-000000?style=` +
                  'for-the-badge&logo=apple&logoColor=white)]' +
                  '(https://www.apple.com/macos)',
                python: `[![Python](${badgeBase}/python-3.11+-blue.svg?` +
                  'style=for-the-badge&logo=python&logoColor=white)]' +
                  '(https://www.python.org)',
                license: `[![License: MIT](${badgeBase}/` +
                  'License-MIT-yellow.svg?style=for-the-badge)]' +
                  '(https://opensource.org/licenses/MIT)',
                ghstars: `[![GitHub stars](${badgeBase}/Stars-` +
                  `${stargazers.length}-brightgreen.svg?` +
                  'style=for-the-badge)]' +
                  `(https://github.com/${repoPath}/stargazers)`
              };

              const content = [
                '# ‚≠ê Stargazers\n',
                '## Wahlergebnisse Visualization\n',
                'Interaktive Visualisierung der US-Wahlergebnisse 2024' +
                ' mit erweiterten Analyse- und Exportfunktionen.\n',
                badges.macos,
                badges.python,
                badges.license,
                badges.ghstars,
                '\n## ‚ú® Unsere Unterst√ºtzer\n',
                'Vielen Dank an alle unsere Stargazers! Diese tollen ' +
                'Menschen haben Interesse an unserem Projekt gezeigt:\n',
                stargazers
                  .map(user =>
                    `[![${user.login}](${user.avatar_url}&s=64)]` +
                    `(${user.html_url})`
                  )
                  .join(' '),
                '\n## üìä Status\n',
                `- **Aktuelle Stargazers**: ${stargazers.length}`,
                `- **Letztes Update**: ${date} (Europe/Berlin)`,
                '\n## ü§ù Mitwirken\n',
                'Gef√§llt Ihnen das Projekt? Bitte geben Sie uns einen ' +
                'Stern ‚≠ê und helfen Sie uns, es zu verbessern!\n',
                `- [GitHub Repository](https://github.com/${repoPath})`,
                `- [Issues melden](https://github.com/${repoPath}/issues)`,
                `- [Pull Requests](https://github.com/${repoPath}/pulls)`
              ].join('\n');

              try {
                const { data: currentFile } = await github.rest.repos
                  .getContent({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    path: 'STARGAZERS.md'
                  });

                await github.rest.repos.createOrUpdateFileContents({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: 'STARGAZERS.md',
                  message: `Update Stargazers list [${date}]`,
                  content: Buffer.from(content).toString('base64'),
                  sha: currentFile.sha,
                  committer: {
                    name: 'GitHub Action',
                    email: 'action@github.com'
                  }
                });
              } catch (error) {
                if (error.status === 404) {
                  await github.rest.repos.createOrUpdateFileContents({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    path: 'STARGAZERS.md',
                    message: `Create Stargazers list [${date}]`,
                    content: Buffer.from(content).toString('base64'),
                    committer: {
                      name: 'GitHub Action',
                      email: 'action@github.com'
                    }
                  });
                } else {
                  throw error;
                }
              }
              console.log('Successfully updated STARGAZERS.md');
            } catch (error) {
              console.error('Error:', error.message);
              core.setFailed(error.message);
            }
