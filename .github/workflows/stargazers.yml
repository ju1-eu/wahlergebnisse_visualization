name: Update Stargazers

on:
  schedule:
    - cron: "0 0 * * *"  # Korrekte Syntax: Minuten Stunden TagDesMonats Monat TagDerWoche
  workflow_dispatch:

jobs:
  update-stargazers:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Update Stargazers list
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { data: stargazers } = await github.rest.activity.listStargazersForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              const date = new Date().toLocaleString('de-DE', {
                timeZone: 'Europe/Berlin',
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
              });

              const content = `# ⭐ Stargazers\n
## Wahlergebnisse Visualization
[![macOS](https://img.shields.io/badge/macOS-000000?style=for-the-badge&logo=apple&logoColor=white)](https://www.apple.com/macos)
[![Python](https://img.shields.io/badge/python-3.11+-blue.svg?style=for-the-badge&logo=python&logoColor=white)](https://www.python.org)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg?style=for-the-badge)](https://opensource.org/licenses/MIT)\n
Thanks to all our stargazers! ✨\n\n${
                stargazers.map(user => 
                  `[![${user.login}](${user.avatar_url}&s=64)](${user.html_url})`
                ).join(' ')
              }\n\nLast updated: ${date} (Europe/Berlin)\n`;

              try {
                // Versuche zuerst die aktuelle Datei zu holen
                const { data: currentFile } = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: 'STARGAZERS.md'
                });

                // Update mit SHA
                await github.rest.repos.createOrUpdateFileContents({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: 'STARGAZERS.md',
                  message: `Update Stargazers list [${date}]`,
                  content: Buffer.from(content).toString('base64'),
                  sha: currentFile.sha,
                  committer: {
                    name: 'GitHub Action',
                    email: 'action@github.com'
                  }
                });
              } catch (error) {
                if (error.status === 404) {
                  // Datei existiert nicht, erstelle sie neu
                  await github.rest.repos.createOrUpdateFileContents({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    path: 'STARGAZERS.md',
                    message: `Create Stargazers list [${date}]`,
                    content: Buffer.from(content).toString('base64'),
                    committer: {
                      name: 'GitHub Action',
                      email: 'action@github.com'
                    }
                  });
                } else {
                  throw error;
                }
              }

              console.log('Successfully updated STARGAZERS.md');
            } catch (error) {
              console.error('Error:', error.message);
              core.setFailed(error.message);
            }
